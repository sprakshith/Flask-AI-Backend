The script looks good!

Below is the next user story, it is delimited between triple backticks:

```
{user_story}
```

And below is how the latest schema the was generated by you in the previous response, it is also delimited between triple backticks for your reference:

```
{latest_schema_design}
```

Now in this case your task is not only to generate a SQL script for the current user story. But it involves more steps. The procedure is written below step by step with proper order:

1. Read and understand the current user story provided above.
2. Examine your previous response, which is presented above as CREATE TABLE statements.
3. Determine necessary alterations to the schema to accommodate both the new user story and all the previous ones. This includes identifying which tables need to be modified or if new tables are required.
4. Update the schema design to reflect these changes. This final schema should incorporate modifications to existing script as well as definitions for any new tables, ensuring it supports all user stories provided to you till now.

*IMPORTANT*: Like all your previous responses, this should should also strictly start with "```sql" and end with "```", without any instruction or comments, strictly SQL code only.

Below is an example of how your response should be:
```sql
-- CREATE TABLE statements here
```

If the user story doesn't have any database or table related details, then in that case respond with extact schema that was provided in the above section.

And the final case is if the user story doesn't have any database or table related details and the latest schema design was also empty. Then response with the below:
```sql
-- NO TABLE DETAILS
``` 

*REMEMBER*: You need to combine the latest schema design with the previous schema design. You should not output only the latest schema design, as it will lead to non-continuity in the design which will cause the script to throw errors.